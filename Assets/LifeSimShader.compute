#pragma kernel UpdateAgents
#pragma kernel Blurr
#pragma kernel KillPrey

float pi;

struct Agent
{
    float2 position;
    float angle;
    float speed;
    float4 color;
    float foodCapacity;
    float maxFoodCapacity;
    int behaviour;
    float viewRange;
    int dead;
};

float sizeX;
float sizeY;
float deltaTime;
int agentCount;

float randomAngleRange;
float randomMult;

float blurrMultiplier;

RWStructuredBuffer<Agent> agents;

RWTexture2D<float4> Result;


float4 averageColorOfNeighbours(float2 uv)
{
    float4 sum = 0;
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            sum += Result[uv + float2(i, j)];
        }
    }
    return sum / 9;
}

[numthreads(8, 8, 1)]
void Blurr(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = averageColorOfNeighbours(id.xy) * blurrMultiplier;
}

float rand(in float2 uv)
{
    return clamp(frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453), 0.0, 1.0);
}
float randBetween(in float2 uv, in float min, in float max)
{
    return rand(uv) * (max - min) + min;
}

Agent calculateNewPosition(Agent agent)
{
    float2 direction = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + (direction * agent.speed);

    bool hasToRecalculate = false;
    
    if (newPos.x < 0)
    {
        agent.angle = 0;
        hasToRecalculate = true;
    }
    if (newPos.x > sizeX)
    {
        agent.angle = 3.14159;
        hasToRecalculate = true;
    }
    if (newPos.y < 0)
    {
        agent.angle = 3.14159 / 2;
        hasToRecalculate = true;
    }
    if (newPos.y > sizeY)
    {
        agent.angle = 3.14159 / 2 * 3;
        hasToRecalculate = true;
    }

    if (hasToRecalculate)
    {
        direction = float2(cos(agent.angle), sin(agent.angle));
        newPos = agent.position + (direction * agent.speed);
    }
    
    agent.position = newPos;
    return agent;
}

bool colorIsSame(float4 color1, float4 color2)
{
    return
        color1.x == color2.x &&
        color1.y == color2.y &&
        color1.z == color2.z &&
        color1.a == color2.a;
}

bool agentIsSame(Agent a, Agent b)
{
    return a.position.x == b.position.x && b.position.y == b.position.y;
}

[numthreads(1024, 1, 1)]
void UpdateAgents(uint3 id : SV_DispatchThreadID)
{
    Agent agent = agents[id.x];

    if (agent.dead == 1)
    {
        return;
    }

    //default value is the current agent
    Agent nearestFriend = agent;
    float distanceNearestFriend = 1000000;
    float2 directionToNearestFriend = float2(0, 0);
    
    //default value is the current agent
    Agent nearestFoe = agent;
    float distanceNearestFoe = 1000000;
    float2 directionToNearestFoe = float2(0, 0);
    
    for (int i = 0; i < agentCount; i++)
    {
        Agent otherAgent = agents[i];
            
        float2 direction = otherAgent.position - agent.position;
        float distance = length(direction);

        if (distance < agent.viewRange && otherAgent.dead == 0)
        {
            if (distance < distanceNearestFoe &&
                otherAgent.behaviour != agent.behaviour)
            {
                distanceNearestFoe = distance;
                nearestFoe = otherAgent;
                directionToNearestFoe = direction;
                     //direction to other Agent
                float2 dir = normalize(direction);
                    //convert direction to angle
                float angle = atan2(dir.y, dir.x);
                if (otherAgent.behaviour == 2 && agent.behaviour == 1)
                {
                        //go in opposite direction - flee from hunter
                    angle = angle * -1;
                }
                agent.angle = angle;
            }
            if (distance < distanceNearestFriend &&
                otherAgent.behaviour == agent.behaviour)
            {
                distanceNearestFriend = distance;
                nearestFriend = otherAgent;
                directionToNearestFriend = direction;
            }
        }
    }
    //no foe found in range and a friend is in range
    if (agentIsSame(agent, nearestFoe) && !agentIsSame(agent, nearestFriend))
    {
        float angle = atan2(directionToNearestFriend.y, directionToNearestFriend.x);

        agent.angle = angle;
    }
    
    //add some randomness to the movement
    
    float randomValue = randBetween(agent.position * deltaTime, -randomAngleRange, randomAngleRange);
    
    float distanceToFoe = length(directionToNearestFoe);
    float multiplierForPanic = agent.viewRange - distanceToFoe;
    float actualMult = randomMult;
    if (agent.behaviour == 1 && !agentIsSame(agent, nearestFoe) && distanceToFoe < agent.viewRange/1.5)
    {
        actualMult = multiplierForPanic;
    }
    
    agent.angle += randomValue * actualMult;
    agent = calculateNewPosition(agent);
    
    
    //agent.foodCapacity = agent.foodCapacity - agent.speed;
    
    /*    
    if (agent.foodCapacity <= 0 && agent.behaviour == 2)
    {
        //agent.dead = 1;
    }*/
    Result[agent.position] = agent.color;
    agents[id.x] = agent;
}

[numthreads(1024, 1, 1)]
void KillPrey(uint3 id : SV_DispatchThreadID)
{
    Agent agent = agents[id.x];
    for (int i = 0; i < agentCount; i++)
    {
        Agent otherAgent = agents[i];
        /*if (agent.foodCapacity >= agent.maxFoodCapacity)
        {
            //return;
        }*/
        if (otherAgent.behaviour == 1 && agent.behaviour == 2 && otherAgent.dead == 0)
        {
            float2 direction = otherAgent.position - agent.position;
            float distance = length(direction);
            if (distance < 15)
            {
                otherAgent.dead = 1;
                Result[otherAgent.position] = float4(0, 0, 0, 0);
                agents[i] = otherAgent;
            //agent.foodCapacity = agent.foodCapacity + 1;
            }
        }
    }
    //agents[id.x] = agent;
}

//add food for preys